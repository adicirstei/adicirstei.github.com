{"posts":[{"content":"## Firefox OS - Power monitor\r\n\r\nSometimes I leave home for days. With one such ocasion the electricity safety fuse poped off and, of course, stayed. You can imagine what happened in the fridge :-). That is how I got the idea of an application to monitor such events. \r\n\r\nBasically, I wanted something to tell me when I have an power interruption. So I created this app for my Firefox OS phone. So I built a HTML5 app that hooks into Battyery API and send e-mail notifications when battery charging status change in a significant way.\r\n\r\n[![power monitor](../images/power-monitor-s.png)](../images/power-monitor.png)\r\n\r\nThe application have two main components. The client that monitors the status changes and the notification service that is written in Python and run on Google's app engine. When the power status in my howse changes, the app issue an XMLHttpRequest to the notification endpoint which then sends an e-mail notification to the listed and enabled e-mail addresses.\r\n\r\nNow I can leave the home confident that I will know when the power gets interrupted and restored.\r\n\r\n","summary":"Sometimes I leave home for days. With one such ocasion the electricity safety fuse poped off and, of course, stayed. You can imagine what happened in the fridge :-). That is how I got the idea of an application to monitor such events.","file":"firefox-os-power-monitor.html","title":"Firefox OS - Power monitor","md":"20140919003.md","date":"2014-09-19"},{"content":"## Firefox OS - Podcast manager\r\n\r\nI am a big fan of technology podcasts. I spend a lot of time in traffic listening and getting up to date with the lastest trends in technology.\r\n\r\nThere is an app in the store but I wanted to create my own in order to include the features I needed. \r\n\r\nBellow you can see two screen shots of it.\r\n\r\n[![podcastmanager-episodes](../images/podcastmanager-episodes-s.png)](../images/podcastmanager-episodes.png)\r\n[![podcastmanager-feeds](../images/podcastmanager-feeds-s.png)](../images/podcastmanager-feeds.png)\r\n\r\nI have used, as I was suposed to, HTML5 and Javascript [Backbone.js](http://backbonejs.org/) in the flavor of [Exoskeleton](http://exosjs.com/) as my framework of choice. This is a fairly complex app, since it deals with various APIs like network and storage. \r\n\r\nExoskeleton sounded like a good idea at first, advertising that it has no jquery and underscore dependencies. But when writing an complex app you will soon find that you will need some of the utility functions that they offer. So I ended including the [lodash](http://lodash.com/) library for templating and some other functions.\r\n\r\nFor styling I have used the [building blocks](http://buildingfirefoxos.com/) graciously made available by mozilla.\r\n\r\n","summary":"I am a big fan of technology podcasts. I spend a lot of time in traffic listening and getting up to date with the lastest trends in technology.","file":"firefox-os-podcast-manager.html","title":"Firefox OS - Podcast manager","md":"20140919002.md","date":"2014-09-19"},{"content":"## Firefox OS apps\r\n\r\nI got a FirefoxOS phone. Now what? Now I need to write my own application. Where do I start? [Mozilla Developer Network](https://developer.mozilla.org/en-US/Firefox_OS) is the place.\r\n\r\n### Boilerplates\r\n\r\n* [Rob Nyman's bp](https://github.com/robnyman/Firefox-OS-Boilerplate-App)\r\n* [Mozilla Mortar templates](https://github.com/mozilla/mortar)\r\n  - [A Blank Template for Open Web Apps](https://github.com/mozilla/mortar-app-stub)\r\n  - [Game Stub](https://github.com/mozilla/mortar-game-stub)\r\n  - [A List/Detail Template for Open Web Apps](https://github.com/mozilla/mortar-list-detail)\r\n  - [Privileged empty app](https://github.com/mozilla/mortar-privileged-empty-app)\r\n  - [Privileged remote app](https://github.com/mozilla/mortar-privileged-remote-app)\r\n  - [TabView Template](https://github.com/mozilla/mortar-tab-view)\r\n  - [A template template](https://github.com/mozilla/mortar-template-template)\r\n\r\n### Styleguide\r\n\r\nA good place to start when you want to design your application is [Firefox OS Guidelines](https://www.mozilla.org/en-US/styleguide/products/firefox-os/).\r\n\r\n### Books - please donate\r\n\r\n* [Andre Garzia - Quick Guide For Firefox OS App Development](https://leanpub.com/quickguidefirefoxosdevelopment/) Creating HTML5 based apps for Firefox OS.\r\n* [Andre Garzia - Building Games for Firefox OS](https://leanpub.com/buildinggamesforfirefoxos/) A quick guide about creating casual 2D games with HTML5.","summary":"I got a FirefoxOS phone. Now what? Now I need to write my own application. Where do I start? Mozilla Developer Network is the place.","file":"firefox-os-apps.html","title":"Firefox OS apps","md":"20140831001.md","date":"2014-08-31"},{"content":"##Python resources I find interesting\r\n###This is for bookmarking purposes\r\n\r\nPyhton resources I got interested lately. I'm simply fascinated with mathematical charts.\r\n\r\n* Modules\r\n  - [enable 4.4.1](https://pypi.python.org/pypi/enable) low-level drawing and interaction\r\n  - [SciPy](http://www.scipy.org/) Python-based ecosystem of open-source software for mathematics, science, and engineering\r\n* Tutorials & Articles\r\n  - [matplotlib tutorial](http://www.loria.fr/~rougier/teaching/matplotlib/) \r\n  - [sympy tutorial](http://docs.sympy.org/latest/tutorial/intro.html) Introduction to symbolic computation\r\n  - [scipy tutorial](http://docs.scipy.org/doc/scipy/reference/tutorial/index.html) Scientific Python\r\n* Tools\r\n  - [IPython and IPython notebook](http://ipython.org/notebook.html)","summary":"Pyhton resources I got interested lately. I'm simply fascinated with mathematical charts.","file":"python-resources-i-find-interesting.html","title":"Python resources I find interesting","md":"20140819001.md","date":"2014-08-19"},{"content":"## Using syntax highlight at build time\r\n\r\nWhen you build websites with mobile devices in mind you must consider lowering the amount of work you set them do. \r\nOn my ancient iPhone 3G phone I, quite often, encounter web sites that broke the browser. This is because of the\r\namount of memory they required. When building my statically generated blog, being a programmer, naturally, I considered \r\nincluding code snipets in my blog posts as you will see in the current one. Then, having to wait to javascript to \r\ndownload and run in order to do the syntax highlighting, it downed on me that I all that parsing and tagging work can be done at build time\r\nand there's no need to do the same work on every device that access my website.\r\n\r\n###But let's go into the solution.\r\nI am writing my blog posts in `markdown`. And am using [highlight.js](http://highlightjs.org/) for syntax highliting. \r\nWhat `highlight.js` does? It is taking a piece of `html` and tag it with spans with specific classes. For example the html bellow is enhanced as \r\nyou can see in the next code snipet.\r\n\r\n`before`\r\n```html\r\n<pre><code class=\"lang-javascript\">\r\nfunction add (a, b) {\r\n  return a+b;\r\n}\r\n</code></pre>\r\n```\r\n\r\n`after`\r\n```html\r\n<pre><code class=\"lang-javascript\">\r\n  <span class=\"hljs-function\">\r\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span> <span class=\"hljs-params\">(a, b)</span> {\r\n  </span>\r\n  <span class=\"hljs-keyword\">return</span> a+b;\r\n}\r\n</code></pre>\r\n```\r\n\r\nUsing this on client side will require some DOM querying and DOM update, then a repaint to apply the accompanying styles. \r\n\r\nAs I said before, the part that is doing the tagging is unnecesary browser work if you have control on the html creation.\r\n\r\nThe [marked](https://github.com/chjj/marked/) node module is offering the posibility to hook your own syntax highlighting in the process. This can be done \r\nby passing to the `highlight` option a function that is doing the tagging as you can see bellow.\r\n\r\n```javascript\r\nmarked.setOptions({\r\n  highlight: function (code, lang) {\r\n    var hl = require('highlight.js');\r\n    if (hl.getLanguage(lang)) {\r\n      return hl.highlight(lang, code).value;\r\n    } else {\r\n      return hl.highlightAuto(code).value;\r\n    }\r\n  }\r\n});\r\n```\r\nIn order to avoid the wrong language detection when I try to highlight a language that is not supported, I call selectively `highlight` or `highlightAuto` functions.\r\n\r\n###Benefits\r\n\r\nBesides the memory and processing power on client device, I discussed at the beggining, another huge benefit comes from reducing the javascript download size with \r\n13KB miniffied and maybe another server request.","summary":"When you build websites with mobile devices in mind you must consider lowering the amount of work you set them do. \nOn my ancient iPhone 3G phone I, quite often, encounter web sites that broke the browser. This is because of the\namount of memory they required. When building my statically generated blog, being a programmer, naturally, I considered \nincluding code snipets in my blog posts as you will see in the current one. Then, having to wait to javascript to \ndownload and run in order to do the syntax highlighting, it downed on me that I all that parsing and tagging work can be done at build time\nand there's no need to do the same work on every device that access my website.","file":"using-syntax-highlight-at-build-time.html","title":"Using syntax highlight at build time","md":"20140722001.md","date":"2014-07-22"},{"content":"## How I built this GitHub hosted site - theme, posts and SEO\r\n\r\nI am not a web designer. I don't have that eye for colors, layout and typoghraphy. I know only some basic CSS. In order to have a decent looking website, I have downloaded a GitHub provided theme and translated it to [Jade](http://jade-lang.com/). This allowed me to reuse the template easily for all my pages.\r\n\r\n`layout.jade`\r\n```jade\r\ndoctype html\r\nhtml(lang=\"en\")\r\n  head\r\n.............\r\n    block seo\r\n      title adicirstei home page\r\n      meta(name='description', content='adicirstei home page and blog')\r\n    link(rel='stylesheet', href='/styles/style.css')\r\n.............\r\nbody\r\n.............\r\n        section\r\n          block content\r\n.............\r\n```\r\n \r\nAnd then, In my post page i just have something like this:\r\n \r\n```jade\r\nextends layout\r\nblock seo\r\n  title the title of my post\r\n  meta(name='description', content='a short description of my post')\r\nblock content\r\n  include:md 20140601001.md \r\n```\r\n\r\nBut how do I get the blog title, description and file name, you might wonder. This is where the [gulp tap plugin](https://github.com/geejs/gulp-tap) came to the rescue. This simple plugin allows one to 'tap' into the streams of gulp task and take a look at the file contents and name.\r\n\r\n```js\r\ngulp.src('src/posts/*.md')\r\n  .pipe(tap(function (file, t) {\r\n    var filename = path.basename(file.path, '.md'),\r\n      contents = file.contents,\r\n      title = contents.toString().split('\\n')[0] || filename,\r\n      newfile = filename;\r\n    title = title.replace(/^#*\\s*/g, '').trim().replace(/\\[([^\\]]*)\\]\\([^)]*\\)/g, '$1');\r\n    file.contents = new Buffer(\"extends layout\\nblock seo\\n  title adicirstei/blog/\" + title +\r\n                               \"\\n  meta(name='description', content='adicirstei home page and blog and \" + title +\r\n                               \"')\\nblock content\\n  article\\n    include:md \" + path.basename(file.path));\r\n    newfile = title.replace(/(\\s|-|_)+/g, '-').toLowerCase();\r\n    file.path = file.path.replace(filename, newfile);\r\n  }))\r\n  .pipe(jade({\r\n    locals: YOUR_LOCALS,\r\n    md: marked\r\n  }))\r\n  .pipe(gulp.dest('./www/posts')); \r\n```\r\n\r\nSo, what's going on here? For each `*.md` file I have in posts folder, I peek into the file content, pick the first line strip it off some markdown and use it both as title and description for the `meta` tag. Then I create a new content `Buffer` with the post template and pass it down the pipe to [gulp-jade](https://github.com/phated/gulp-jade) plugin. In order to obtain a SEF url, I also replace the file name with a one creaded based on the post title.\r\n\r\nI'm not sure if this is the best approach, but it's getting the job done and that's what mattered for me at the time. My goal was to get up and runnig as fast as possible a web site. And this is what I get.\r\n\r\nI hope my sollution to the problem to be of some use for you also.\r\n\r\n### In the same series\r\n* [How I built the present GitHub userpage static site](/posts/how-i-built-the-present-github-userpage-static-site.html)\r\n* [How I built a GitHub hosted site - the tools](/posts/how-i-built-a-github-hosted-site-the-tools.html)\r\n* [How I built this GitHub hosted site - theme, posts and SEO](/posts/how-i-built-this-github-hosted-site-theme-posts-and-seo.html)","summary":"I am not a web designer. I don't have that eye for colors, layout and typoghraphy. I know only some basic CSS. In order to have a decent looking website, I have downloaded a GitHub provided theme and translated it to Jade . This allowed me to reuse the template easily for all my pages.","file":"how-i-built-this-github-hosted-site-theme-posts-and-seo.html","title":"How I built this GitHub hosted site - theme, posts and SEO","md":"20140601001.md","date":"2014-06-01"},{"content":"## How I built a GitHub hosted site - the tools\r\n\r\n### [gulpjs](http://gulpjs.com/)\r\nBecause I like writing code not configuration files. Let us look at the posts building task:\r\n```js\r\ngulp.task('templates', function () {\r\n  var YOUR_LOCALS = {\r\n    md: marked\r\n  };\r\n    \r\n  gulp.src('src/posts/*.md')\r\n    .pipe(tap(function (file, t) {\r\n      var filename = path.basename(file.path, '.md'),\r\n        contents = file.contents,\r\n        title = contents.toString().split('\\n')[0] || filename;\r\n      title = title.replace(/^#*\\s*/g, '');\r\n      file.contents = new Buffer('extends layout\\nblock content\\n  article\\n    include:md '\r\n      + path.basename(file.path));\r\n      posts.push({\r\n        file: filename + '.html',\r\n        title: title,\r\n        date: filename.slice(0, 4)\r\n          + '-' + filename.slice(4, 6) \r\n          + '-' + filename.slice(6, 8)});\r\n\r\n    }))\r\n    .pipe(jade({\r\n      locals: YOUR_LOCALS\r\n    }))\r\n    .pipe(gulp.dest('./www/posts'));\r\n});\r\n```\r\nWhat's going on here? I look for any markdown file I find in posts folder and I feed down the pipe a simple jade string that is referencing the blogpost template. Something like this:\r\n```jade\r\nextends layout\r\n  block content\r\n    article\r\n      include:md 20140526001.md\r\n```\r\n\r\nThe result is a full featured html file. In paralel I build an array with blogpost matadata to feed later to the blog landing page.\r\n\r\n### [jade](http://jade-lang.com/)\r\nBecause it is briliant for laying out the web page and can be extended with lots of filters of which I used markdown.\r\n\r\n### [marked](https://github.com/chjj/marked)\r\nMarkdown looks like the perfect format to write content. It is clean and allows you to extend it. \r\nI chose marked because it integrates nicely with code highlighting libraries.\r\n\r\n### [highlight.js](http://highlightjs.org/)\r\nBecause supports tons of languages and tons of themes. Though, in the future, I might consider pygment for the sake of learning.\r\n\r\nIn order to do the styling at build time you need to define marked's highlight function. \r\nThe `highlight` function I copied from maked [readme page](https://github.com/chjj/marked/blob/master/README.md).\r\n```js\r\nvar gulp = require('gulp'),\r\n  jade = require('gulp-jade'),\r\n  marked = require('marked');\r\n\r\nmarked.setOptions({\r\n  highlight: function (code) {\r\n    return require('highlight.js').highlightAuto(code).value;\r\n  }\r\n});\r\n```\r\nThen, in tasks you require it, you reference it like this:\r\n```js\r\nvar YOUR_LOCALS = {\r\n  md: marked\r\n};\r\n```\r\nAnd somewhere down the line\r\n```js\r\n.pipe(jade({\r\n  locals: YOUR_LOCALS\r\n}))\r\n```\r\n\r\n### In the same series\r\n* [How I built the present GitHub userpage static site](/posts/how-i-built-the-present-github-userpage-static-site.html)\r\n* [How I built a GitHub hosted site - the tools](/posts/how-i-built-a-github-hosted-site-the-tools.html)\r\n* [How I built this GitHub hosted site - theme, posts and SEO](/posts/how-i-built-this-github-hosted-site-theme-posts-and-seo.html)","summary":"Because I like writing code not configuration files. Let us look at the posts building task:  `js\ngulp.task('templates', function () {\n  var YOUR_LOCALS = {\n    md: marked\n  };","file":"how-i-built-a-github-hosted-site-the-tools.html","title":"How I built a GitHub hosted site - the tools","md":"20140526001.md","date":"2014-05-26"},{"content":"##How I built the present GitHub userpage static site\r\n\r\nI needed a blog but I was unhappy with the services out there. I wanted *full* control over the \r\nhow it looks (even though I am not a designer) and behaves. I also wanted to have my content on my computer.\r\n\r\n![marked.setOptions](../images/marked.setOptions.png)\r\n\r\n###The idea\r\n\r\nThis is how i got to the idea of hosting a static user page at GitHub. Looking around for static \r\nsite generators I found Jekyll and Octopress a framework based on Jekyll. But...\r\n\r\n###The problem\r\n\r\nI am a Windows user and installing, configuring and running ruby on a windows machine is no easy task. \r\nOn the other hand I am not using ruby and taking the trouble to install it just for the sake of Jekyll \r\nit was not appealing. So, as a developer, I decided to build my own basic static web site generator.\r\n\r\nThis gave me the oportunity to use my tools of choice: [nodejs](http://nodejs.org/), \r\n[gulpjs](http://gulpjs.com/) and of course [git](http://git-scm.com/).\r\n\r\nAnd this is how the jurney beggins. \r\n\r\n### In the same series\r\n* [How I built the present GitHub userpage static site](/posts/how-i-built-the-present-github-userpage-static-site.html)\r\n* [How I built a GitHub hosted site - the tools](/posts/how-i-built-a-github-hosted-site-the-tools.html)\r\n* [How I built this GitHub hosted site - theme, posts and SEO](/posts/how-i-built-this-github-hosted-site-theme-posts-and-seo.html)\r\n","summary":"I needed a blog but I was unhappy with the services out there. I wanted full control over the \nhow it looks (even though I am not a designer) and behaves. I also wanted to have my content on my computer.","file":"how-i-built-the-present-github-userpage-static-site.html","title":"How I built the present GitHub userpage static site","md":"20140521001.md","date":"2014-05-21"}]}